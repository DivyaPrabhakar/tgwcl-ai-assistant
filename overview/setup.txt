# Wardrobe AI Assistant - Complete Setup Guide

## Overview
This guide will help you deploy your personal wardrobe AI assistant that integrates with your multiple Airtable databases and uses OpenAI to provide intelligent insights about your closet.

## Prerequisites
- Node.js 18+ installed
- Airtable account with your wardrobe data across multiple bases
- OpenAI API account
- GitHub account (for deployment)

## Step 1: Prepare Your Airtable Databases

### Your Database Structure
You have three separate Airtable bases to work around size limitations:

**1. DVP_CLOSET_2_20_2025 (Main Closet)**
- `Items` table - Current active clothing items
- `Outfits` table - Complete outfit combinations
- `Usage Log` table - Individual item usage tracking

**2. DVP_CLOSET_REFERENCES_7_2025 (References)**
- `Inspiration` table - Style inspiration photos and references
- `Shopping list` table - Items you're considering purchasing
- `Avoids` table - Items/styles to avoid buying

**3. DVP_CLOSET_FINISHED_ITEMS_7_2025 (Inactive)**
- `Inactive items` table - Items no longer in your closet (donated, sold, discarded)

### Required Field Structure

**Items Table Fields:**
- `Name` (Single line text)
- `Category` (Single select: Tops, Bottoms, Shoes, Accessories, etc.)
- `Color` (Single line text)
- `Brand` (Single line text)
- `Cost` (Currency)
- `Season` (Single select: Spring, Summer, Fall, Winter, All)
- `Size` (Single line text)

**Usage Log Table Fields:**
- `Date` (Date)
- `Item` (Link to Items table OR Single line text with item name)
- `Occasion` (Single select: Work, Casual, Formal, Exercise, etc.)
- `Weather` (Single line text)
- `Rating` (Number 1-5)

**Inactive Items Table Fields:**
- `Name` (Single line text)
- `Category` (Single select)
- `Cost` (Currency)
- `Reason` (Single select: Donated, Sold, Discarded, Worn Out, etc.)

**Shopping List Table Fields:**
- `Item` (Single line text)
- `Priority` (Single select: High, Medium, Low)
- `Estimated Cost` (Currency)

**Inspiration Table Fields:**
- `Photo` (Attachment)
- `Source` (Single line text)
- `Style Tags` (Multiple select)
- `Notes` (Long text)

### Get Your Airtable Credentials
1. Go to https://airtable.com/api
2. Select each of your three bases
3. Copy each **Base ID** (starts with "app") - you'll need all three
4. Get your **API Key** from https://airtable.com/create/tokens

## Step 2: Get OpenAI API Key
1. Sign up at https://platform.openai.com/
2. Go to API Keys section
3. Create a new API key
4. Copy and securely store it

## Step 3: Local Development Setup

### Backend Setup
1. Create a new directory for your project:
```bash
mkdir wardrobe-ai
cd wardrobe-ai
mkdir backend
cd backend
```

2. Initialize the project:
```bash
npm init -y
```

3. Install dependencies:
```bash
npm install express cors airtable openai dotenv
npm install --save-dev nodemon
```

4. Create the server file using the backend code provided above

5. Create `.env` file with YOUR specific base IDs:
```env
AIRTABLE_API_KEY=your_airtable_api_key_here
AIRTABLE_CLOSET_BASE_ID=app123...  # DVP_CLOSET_2_20_2025
AIRTABLE_REFERENCES_BASE_ID=app456...  # DVP_CLOSET_REFERENCES_7_2025
AIRTABLE_FINISHED_BASE_ID=app789...  # DVP_CLOSET_FINISHED_ITEMS_7_2025
OPENAI_API_KEY=sk-proj-...
PORT=3001
```

6. Update `package.json` scripts:
```json
{
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  }
}
```

7. Test the backend:
```bash
npm run dev
```

### Test Individual Endpoints
Once your backend is running, test each database connection:

```bash
# Test main closet data
curl http://localhost:3001/api/wardrobe/items
curl http://localhost:3001/api/wardrobe/outfits
curl http://localhost:3001/api/wardrobe/usage-log

# Test references data  
curl http://localhost:3001/api/wardrobe/inspiration
curl http://localhost:3001/api/wardrobe/shopping-list
curl http://localhost:3001/api/wardrobe/avoids

# Test inactive items
curl http://localhost:3001/api/wardrobe/inactive-items

# Test analytics
curl http://localhost:3001/api/wardrobe/analytics
curl http://localhost:3001/api/wardrobe/cost-analysis
```

### Frontend Setup
1. In your main project directory:
```bash
cd ..
npx create-react-app frontend
cd frontend
npm install lucide-react
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

2. Configure Tailwind CSS in `tailwind.config.js`:
```javascript
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

3. Add Tailwind directives to `src/index.css`:
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

4. Replace `src/App.js` with the React component provided above

5. Test the frontend:
```bash
npm start
```

## Step 4: Deployment Options

### Environment Variables for Production
When deploying, you'll need these environment variables:

```env
AIRTABLE_API_KEY=your_actual_api_key
AIRTABLE_CLOSET_BASE_ID=your_actual_DVP_CLOSET_2_20_2025_base_id
AIRTABLE_REFERENCES_BASE_ID=your_actual_DVP_CLOSET_REFERENCES_7_2025_base_id
AIRTABLE_FINISHED_BASE_ID=your_actual_DVP_CLOSET_FINISHED_ITEMS_7_2025_base_id
OPENAI_API_KEY=your_actual_openai_key
```

### Option A: Railway + Vercel (Recommended)

#### Deploy Backend to Railway
1. Go to https://railway.app/
2. Sign up with GitHub
3. Click "New Project" â†’ "Deploy from GitHub repo"
4. Connect your backend repository
5. Add ALL FIVE environment variables in Railway dashboard
6. Railway will automatically deploy your backend

#### Deploy Frontend to Vercel
1. Go to https://vercel.com/
2. Sign up with GitHub
3. Click "New Project"
4. Import your frontend repository
5. Update your React app to use the Railway backend URL
6. Deploy

## Step 5: Configuration and Testing

### Update Frontend API URLs
In your React app, update the API calls to use your deployed backend URL:

```javascript
// Replace localhost with your deployed backend URL
const response = await fetch('https://your-backend-url.railway.app/api/chat', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    message: inputMessage,
    context: messages.slice(-5)
  })
});
```

### Test Your Multi-Database Setup
1. Visit your deployed frontend URL
2. Test queries that use data from all three databases:
   - **From Items/Usage**: "What are my most worn items?"
   - **From Inactive Items**: "Why did I get rid of my last black dress?"
   - **From Shopping List**: "What's on my shopping list right now?"
   - **From Inspiration**: "Show me my style inspiration themes"
   - **From Avoids**: "What should I avoid buying?"
   - **Cross-database**: "Should I buy this item? Check if it's similar to anything I donated"

## Step 6: Advanced Queries for Your Multi-Database Setup

### Sample Queries That Use Multiple Databases
- **Purchase Evaluation**: "I'm considering a black blazer. Do I have similar items? Is this on my shopping list? Did I donate any blazers?"
- **Cost Analysis**: "What's my cost per wear for items I still own vs items I got rid of?"
- **Pattern Recognition**: "What categories of items do I tend to donate most often?"
- **Gap Analysis**: "Based on my usage log, what occasions do I need more clothes for?"
- **Shopping List Validation**: "Which items on my shopping list would fill real gaps vs duplicates?"

### Understanding the AI's Knowledge
The AI now has access to:
- **Active wardrobe** (Items, Outfits, Usage Log)
- **Historical decisions** (Inactive items and why they were removed)
- **Future planning** (Shopping list, Inspiration, Avoids)
- **Usage patterns** (What you actually wear vs what you own)
- **Financial data** (Cost per wear, investment analysis)

## Troubleshooting Multi-Database Setup

### Common Issues
1. **Wrong Base IDs**: Double-check each base ID matches the correct database
2. **Table Name Mismatches**: Ensure table names exactly match what's in your Airtable
3. **Field Name Issues**: The code looks for specific field names - adjust if yours are different
4. **API Rate Limits**: With 3 bases, you might hit Airtable's rate limits faster

### Verifying Database Connections
Check each endpoint individually:
- `/api/wardrobe/items` should return your current clothing
- `/api/wardrobe/inactive-items` should return donated/sold items  
- `/api/wardrobe/inspiration` should return your style references
- `/api/wardrobe/analytics` should combine data from all databases

### Security Notes
- Never commit your actual base IDs or API keys to version control
- Use environment variables for all sensitive data in production
- Your API keys give access to your personal wardrobe data

## Cost Considerations
- **OpenAI API**: ~$0.002 per 1K tokens (very affordable for personal use)
- **Deployment**: Railway/Vercel free tiers should be sufficient
- **Airtable**: You're already managing multiple bases, so you understand the limits

## Next Steps
1. Test locally with your three databases
2. Deploy to production
3. Start with simple queries to verify all data sources work
4. Gradually explore more complex cross-database insights
5. Consider adding webhook integration for real-time updates

Your multi-database wardrobe AI is now ready to provide insights across your entire closet ecosystem!